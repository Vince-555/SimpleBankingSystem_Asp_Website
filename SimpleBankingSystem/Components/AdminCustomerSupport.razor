@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime
@using Microsoft.AspNetCore.SignalR.Client;
@using SimpleBankingSystem.Hubs;
@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using SimpleBankingSystem

<h1>Admin Live Customer Support</h1>
<hr />

@if (!_isChatting)
{
    _username = "Administrator";

    System.Threading.Thread.Sleep(1000);

    Chat();

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                string thisHref = $"/admin/adminhome/singlechat?usernameforgroup={item.Username}&isadmin=true";
                if (item.Username != "Administrator")
                {<div class="alert alert-info">@item.Body @item.Username <a href=@thisHref target="popup" onclick="window.open('@thisHref', 'popup', 'width=600,height=400'); return false">Start Chat</a></div>}
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Date @item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
    </div>
}
@code {

    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    public async Task Chat()
    {

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + SignalRChatHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("BroadcastToAdmin", BroadcastMessage);

            await _hubConnection.StartAsync();

            await _hubConnection.SendAsync("JoinRoomCSWaiting",_username);

        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;

            CloseWindow();
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("BroadcastToMain", _username, message);

            _newMessage = string.Empty;
        }
    }

    private void CloseWindow()
    {
        JsRuntime.InvokeVoidAsync("window.close");
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
            Date = DateTime.Now.ToString("H:mm");
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public string Date { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}